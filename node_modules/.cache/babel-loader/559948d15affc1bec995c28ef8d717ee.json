{"ast":null,"code":"var _this = this;\n\nimport AuthService from '../../services/AuthService';\nimport { setCurrentUser, registerSuccess, logoutUser, getErrors } from \"./actionCreators\";\n/**\n * Login user action\n */\n\nexport var loginUser = function loginUser(state, history) {\n  return function (dispatch) {\n    AuthService.login(_this.state.email, _this.state.password).then(function (resp) {\n      if (resp.data.success) {\n        console.log(' response data token:' + resp.data.profile);\n        dispatch(setCurrentUser(resp.data.profile));\n        console.log('user set');\n        AuthService.saveToken(resp.data.token);\n        history.push('/');\n      }\n    }).catch(function (error) {\n      dispatch(getErrors({\n        loginError: error\n      }));\n    });\n  };\n};\n/**\n * Logout action\n */\n\nexport var logout = function logout(history) {\n  return function (dispatch) {\n    AuthService.logout();\n    dispatch(logoutUser());\n    history.push('/');\n    window.location.reload();\n  };\n};\n/**\n * Register user action\n */\n\nexport var registerUser = function registerUser(user, history) {\n  return function (dispatch) {\n    AuthService.signup(user).then(function (resp) {\n      console.log('the user is:' + resp);\n\n      if (resp.data.success) {\n        dispatch(registerSuccess());\n        history.push('/api/users/login');\n      }\n    }).catch(function (error) {\n      if (error.response.data) {\n        dispatch(getErrors({\n          registerError: error.response.data.error\n        }));\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/home/realoj/RealProjects/msoto-frontend/src/store/actions/auth.js"],"names":["AuthService","setCurrentUser","registerSuccess","logoutUser","getErrors","loginUser","state","history","dispatch","login","email","password","then","resp","data","success","console","log","profile","saveToken","token","push","catch","error","loginError","logout","window","location","reload","registerUser","user","signup","response","registerError"],"mappings":";;AAAA,OAAOA,WAAP,MAAwB,4BAAxB;AACA,SAASC,cAAT,EAAyBC,eAAzB,EAA0CC,UAA1C,EAAsDC,SAAtD,QAAuE,kBAAvE;AAEA;;;;AAGA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAQC,OAAR;AAAA,SAAoB,UAAAC,QAAQ,EAAI;AACvDR,IAAAA,WAAW,CAACS,KAAZ,CAAkB,KAAI,CAACH,KAAL,CAAWI,KAA7B,EAAoC,KAAI,CAACJ,KAAL,CAAWK,QAA/C,EAAyDC,IAAzD,CAA8D,UAAAC,IAAI,EAAI;AACpE,UAAIA,IAAI,CAACC,IAAL,CAAUC,OAAd,EAAuB;AACrBC,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0BJ,IAAI,CAACC,IAAL,CAAUI,OAAhD;AACAV,QAAAA,QAAQ,CAACP,cAAc,CAACY,IAAI,CAACC,IAAL,CAAUI,OAAX,CAAf,CAAR;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAjB,QAAAA,WAAW,CAACmB,SAAZ,CAAsBN,IAAI,CAACC,IAAL,CAAUM,KAAhC;AACAb,QAAAA,OAAO,CAACc,IAAR,CAAa,GAAb;AACD;AACF,KARD,EAQGC,KARH,CAQS,UAAAC,KAAK,EAAI;AACdf,MAAAA,QAAQ,CAACJ,SAAS,CAAC;AACjBoB,QAAAA,UAAU,EAAED;AADK,OAAD,CAAV,CAAR;AAGH,KAZD;AAaD,GAdwB;AAAA,CAAlB;AAgBP;;;;AAGA,OAAO,IAAME,MAAM,GAAG,SAATA,MAAS,CAAClB,OAAD;AAAA,SAAa,UAAAC,QAAQ,EAAI;AAC7CR,IAAAA,WAAW,CAACyB,MAAZ;AACAjB,IAAAA,QAAQ,CAACL,UAAU,EAAX,CAAR;AACAI,IAAAA,OAAO,CAACc,IAAR,CAAa,GAAb;AACAK,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,GALqB;AAAA,CAAf;AAOP;;;;AAGA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAOvB,OAAP;AAAA,SAAmB,UAAAC,QAAQ,EAAI;AACzDR,IAAAA,WAAW,CAAC+B,MAAZ,CAAmBD,IAAnB,EAAyBlB,IAAzB,CAA8B,UAAAC,IAAI,EAAI;AACpCG,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBJ,IAA7B;;AACA,UAAIA,IAAI,CAACC,IAAL,CAAUC,OAAd,EAAuB;AACrBP,QAAAA,QAAQ,CAACN,eAAe,EAAhB,CAAR;AACAK,QAAAA,OAAO,CAACc,IAAR,CAAa,kBAAb;AACD;AACF,KAND,EAMGC,KANH,CAMS,UAAAC,KAAK,EAAI;AAChB,UAAIA,KAAK,CAACS,QAAN,CAAelB,IAAnB,EAAyB;AACvBN,QAAAA,QAAQ,CAACJ,SAAS,CAAC;AACjB6B,UAAAA,aAAa,EAAEV,KAAK,CAACS,QAAN,CAAelB,IAAf,CAAoBS;AADlB,SAAD,CAAV,CAAR;AAGD;AACF,KAZD;AAaD,GAd2B;AAAA,CAArB","sourcesContent":["import AuthService from '../../services/AuthService';\nimport { setCurrentUser, registerSuccess, logoutUser, getErrors } from \"./actionCreators\";\n\n/**\n * Login user action\n */\nexport const loginUser = (state, history) => dispatch => {\n  AuthService.login(this.state.email, this.state.password).then(resp => {\n    if (resp.data.success) {\n      console.log(' response data token:' + resp.data.profile);\n      dispatch(setCurrentUser(resp.data.profile));\n      console.log('user set')\n      AuthService.saveToken(resp.data.token);\n      history.push('/');\n    }\n  }).catch(error => {\n      dispatch(getErrors({\n        loginError: error\n      }));\n  });\n}\n\n/**\n * Logout action\n */\nexport const logout = (history) => dispatch => {\n  AuthService.logout();\n  dispatch(logoutUser());\n  history.push('/')\n  window.location.reload();\n}\n\n/**\n * Register user action\n */\nexport const registerUser = (user, history) => dispatch => {\n  AuthService.signup(user).then(resp => {\n    console.log('the user is:' + resp)\n    if (resp.data.success) {\n      dispatch(registerSuccess());\n      history.push('/api/users/login');\n    }\n  }).catch(error => {\n    if (error.response.data) {\n      dispatch(getErrors({\n        registerError: error.response.data.error\n      }));\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}